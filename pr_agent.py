# pr_agent.py
"""
PR‑Creator agent that:
1. Clones a GitHub repo
2. Applies dependency upgrades to pom.xml
3. Commits + pushes a new branch
4. Opens a pull‑request via the gh CLI
"""

from crewai import Agent
from crewai.tools import tool           # ✅ decorator + Tool base
from helpers.pom_tools import patch_pom_xml  # ✅ helper function to patch pom.xml
from helpers.coverage_tools import run_coverage

import json, os, subprocess, tempfile, shutil, datetime
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
# ------------------------------------------------------------------
# 1. Define the tool function and decorate it with @tool
# ------------------------------------------------------------------
@tool
def open_pull_request(repo_url: str, fix_json: str) -> str:
    """
    Clone a GitHub repository, apply dependency upgrades to pom.xml,
    commit the change on a new branch, push it, and open a pull request.

    Parameters
    ----------
    repo_url : str
        HTTPS URL of the target GitHub repository.
    fix_json : str
        JSON array from the Fixer agent.
    Returns
    -------
    str
        The URL of the newly‑opened pull request.
    """
    # Function implementation remains unchanged
    fixes = json.loads(fix_json)
    workdir = tempfile.mkdtemp(prefix="ai-fix-")

    # -- clone --
    subprocess.run(["git", "clone", repo_url, workdir], check=True)

    # -- create branch --
    ts_suffix = datetime.datetime.utcnow().strftime("%Y%m%d-%H%M%S")
    branch = f"ai/sec-fix-bot-{ts_suffix}"
    subprocess.run(["git", "-C", workdir, "checkout", "-b", branch], check=True)

    # -- patch pom.xml --
    patch_pom_xml(workdir, fixes)

    # -- git commit & push --
    subprocess.run(["git", "-C", workdir, "config", "user.name", "ai-sec-bot"], check=True)
    subprocess.run(["git", "-C", workdir, "config", "user.email", "bot@example.com"], check=True)
    subprocess.run(["git", "-C", workdir, "add", "pom.xml"], check=True)
    subprocess.run(["git", "-C", workdir, "commit", "-m", "chore: security dependency upgrades"], check=True)
    subprocess.run(["git", "-C", workdir, "push", "-u", "origin", branch], check=True)

    # -- open PR using gh CLI --
    repo_slug = repo_url.replace("https://github.com/", "")
    token_remote = f"https://{GITHUB_TOKEN}@github.com/{repo_slug}.git"
    # # update the remote URL so the PAT is used
    # pr_url = subprocess.check_output(
    #     ["gh", "pr", "create",
    #     "--head", branch,
    #     "--title", "AI Bot: Dependency security upgrades",
    #     "--body", "Automated pom.xml upgrades generated by AI‑Security Bot 🤖🛡️"],
    #     cwd=workdir, text=True
    # ).strip()

    shutil.rmtree(workdir)
    return repo_slug

# ------------------------------------------------------------------
# 2. Register the tool on an Agent
# ------------------------------------------------------------------
pr_agent = Agent(
    role="PR Creator",
    backstory="Automation bot that patches Maven dependencies and opens pull‑requests.",
    goal="Deliver a ready‑to‑merge PR fixing vulnerable dependencies.",
    verbose=True,
    tools=[open_pull_request],   # ✅ makes the tool callable from Tasks
)


# helpers/pom_tools.py
import xml.etree.ElementTree as ET
from pathlib import Path

def patch_pom_xml(repo_dir: str, fixes: list[dict]) -> None:
    """
    fixes = [
        {"groupId": "org.springframework.security", "artifactId": "spring-security-core", "new": "5.8.9"},
        {"groupId": "com.fasterxml.jackson.core",   "artifactId": "jackson-databind",   "new": "2.17.1"},
    ]
    """
    pom_path = Path(repo_dir) / "pom.xml"
    tree = ET.parse(pom_path)
    root = tree.getroot()

    # Maven POM uses the XML namespace "http://maven.apache.org/POM/4.0.0"
    ns = {"m": "http://maven.apache.org/POM/4.0.0"}

    for fix in fixes:
        xpath = (
            "./m:dependencies/m:dependency"
            f"[m:groupId='{fix['groupId']}'][m:artifactId='{fix['artifactId']}']/m:version"
        )
        version_elem = root.find(xpath, ns)
        if version_elem is not None:
            version_elem.text = fix["new"]

    tree.write(pom_path, encoding="utf-8", xml_declaration=True)